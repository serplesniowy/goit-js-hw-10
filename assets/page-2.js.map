{"version":3,"file":"page-2.js","sources":["../../src/01/01-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\nlet countdown;\n\nstartButton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nstartButton.addEventListener('click', () => {\n  const endDate = new Date(datetimePicker.value);\n  startCountdown(endDate);\n});\n\nfunction startCountdown(endDate) {\n  clearInterval(countdown);\n  countdown = setInterval(() => {\n    const now = new Date().getTime();\n    const distance = endDate - now;\n\n    if (distance < 0) {\n      clearInterval(countdown);\n      return;\n    }\n\n    const time = convertMs(distance);\n    updateTimer(time);\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimer({ days, hours, minutes, seconds }) {\n  daysSpan.textContent = String(days).padStart(2, '0');\n  hoursSpan.textContent = String(hours).padStart(2, '0');\n  minutesSpan.textContent = String(minutes).padStart(2, '0');\n  secondsSpan.textContent = String(seconds).padStart(2, '0');\n}\n"],"names":["datetimePicker","startButton","daysSpan","hoursSpan","minutesSpan","secondsSpan","countdown","options","selectedDates","iziToast","flatpickr","endDate","startCountdown","now","distance","time","convertMs","updateTimer","ms","days","hours","minutes","seconds"],"mappings":"6FAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAEJL,EAAY,SAAW,GAEvB,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACAA,EAAc,CAAC,GAChB,IAAI,MACtBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDR,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAS,EAAU,mBAAoBH,CAAO,EAErCN,EAAY,iBAAiB,QAAS,IAAM,CAC1C,MAAMU,EAAU,IAAI,KAAKX,EAAe,KAAK,EAC7CY,EAAeD,CAAO,CACxB,CAAC,EAED,SAASC,EAAeD,EAAS,CAC/B,cAAcL,CAAS,EACvBA,EAAY,YAAY,IAAM,CAC5B,MAAMO,EAAM,IAAI,KAAM,EAAC,QAAO,EACxBC,EAAWH,EAAUE,EAE3B,GAAIC,EAAW,EAAG,CAChB,cAAcR,CAAS,EACvB,MACD,CAED,MAAMS,EAAOC,EAAUF,CAAQ,EAC/BG,EAAYF,CAAI,CACjB,EAAE,GAAI,CACT,CAEA,SAASC,EAAUE,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAY,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACtDpB,EAAS,YAAc,OAAOiB,CAAI,EAAE,SAAS,EAAG,GAAG,EACnDhB,EAAU,YAAc,OAAOiB,CAAK,EAAE,SAAS,EAAG,GAAG,EACrDhB,EAAY,YAAc,OAAOiB,CAAO,EAAE,SAAS,EAAG,GAAG,EACzDhB,EAAY,YAAc,OAAOiB,CAAO,EAAE,SAAS,EAAG,GAAG,CAC3D"}